// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Comment {
  id               String    @id @default(cuid())
  createdAt        DateTime  @default(now())
  endsAt           DateTime?
  body             String    @db.VarChar(5000)
  rating           Int       @default(0)
  userId           String
  userName         String
  userAvatar       String
  user             User      @relation(fields: [userId, userName, userAvatar], references: [id, name, avatar])
  reply            Comment?  @relation(name: "Replies", fields: [repliedCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies          Comment[] @relation(name: "Replies")
  repliedCommentId String?
  repliedUserName  String?
  Rate             Rate[]
}

model User {
  id            String    @id @default(cuid())
  name          String
  avatar        String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  comments      Comment[]
  Rate          Rate[]

  Account Account[]
  Session Session[]
  @@unique([id, name, avatar])
}

model Rate {
  id        Int     @id @default(autoincrement())
  userId    String
  commentId String
  status    Int     @default(0)
  user      User    @relation(fields: [userId], references: [id])
  comment   Comment @relation(fields: [commentId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
